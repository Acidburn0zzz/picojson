# PicoJSON - a C++ JSON parser / serializer

## Blurbs

- header-file only
- no dependencies (only uses standard C++ libraries)
- STL-frendly (arrays are represented by using std::vector, objects are std::map)
- provides both pull interface and streaming (event-based) interface

## Reading JSON using the pull interface

There are two ways to use the pull (DOM-like) interface of picojson.  One is to use operator&lt;&lt, and the other is by specifying a set of iterators specifying the range from where the JSON stream should be read.

<pre>
picojson::value v;
std::cin &gt;&gt; v;
std::string err = picojson::get_last_error();
if (! err.empty()) {
  std::cerr &lt;&lt; err &lt;&lt; std::endl;
}
</pre>

<pre>
std::istream_iterator input(cin);
picojson::value v;
std::string err;
input = picojson::parse(v, input, std::istream_iterator(), &err);
if (! err.empty()) {
  std::cerr &lt;&lt; err &lt;&lt; std::endl;
}
</pre>

<pre>
const char* json = "{\"a\":1}";
picojson::value v;
std::string err;
picojson::parse(v, json, json + strlen(json), &err);
if (! err.empty()) {
  std::cerr &lt;&lt; err &lt;&lt; std::endl;
}
</pre>

## Accessing the values

Values of a JSON object is represented as instances of picojson::value class.

<pre>
namespace picojson {

  class value {
    ...

  public:

    typedef std::vector&lt;value&gt; array;
    typedef std::map&lt;std::string, value&gt; object;

    value();                               // create a null object
    explicit value(bool b);                // create a boolean object
    explicit value(double n);              // create a number object
    explicit value(const std::string& s);  // create a string object
    explicit value(const array& a);        // create an array object
    explicit value(const object& o);       // create an "object"

    bool is&lt;picojson::null&gt;() const;       // if the object is "null"

    bool is&lt;bool&gt;() const;                 // if the object is a boolean
    const bool& get&lt;bool&gt;() const;         // const accessor (usable only if the object is a boolean)
    bool& get&lt;bool&gt;();                     // non-const accessor (usable only if the object is a boolean)

    bool is&lt;double&gt;() const;               // if the object is a number
    const double& get&lt;double&gt;() const;     // const accessor (usable only if the object is a number)
    double& get&lt;double&gt;();                 // non-const accessor (usable only if the object is a number)

    bool is&lt;std::string&gt;() const;          // if the object is a string
    const std::string& get&lt;std::string&gt;() const;
                                           // const accessor (usable only if the object is a string)
    std::string& get&lt;std::string&gt;();       // non-const accessor (usable only if the object is a string)

    bool is&lt;array&gt;() const;                // if the object is an array
    const array& get&lt;array&gt;() const;       // const accessor (usable only if the object is an array)
    array& get&lt;array&gt;();                   // non-const accessor (usable only if the object is an array)

    bool is&lt;object&gt;() const;               // if the object is an "object"
    const object& get&lt;object&gt;() const;     // const accessor (usable only if the object is an object)
    object& get&lt;array&gt;();                  // non-const accessor (usable only if the object is an array)

    operator bool() const;                 // evaluates the object as a boolean
  };

}
</pre>
